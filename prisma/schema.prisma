// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  email          String            
  username       String?            
  authProvider   AuthProvider       @default(EMAIL)
  hash           String
  role           UserRoles          @default(USER)
  refresh        String?
  avatarUrl      String?
  firstName      String?
  lastName       String?
  bio            String?
  communications UserCommunication?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@unique([email])
}

model UserCommunication {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @unique @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  chatIds    String[]  @db.ObjectId
  chats      Chat[]    @relation(fields: [chatIds], references: [id])
  groupIds   String[]  @db.ObjectId
  groups     Group[]   @relation(fields: [groupIds], references: [id])
  channelIds String[]  @db.ObjectId
  channels   Channel[] @relation(fields: [channelIds], references: [id])
  messages   Message[]
}

model Chat {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  userCommunicationIds String[]            @db.ObjectId
  communications       UserCommunication[] @relation(fields: [userCommunicationIds], references: [id])
  messages             Message[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Group {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  userCommunicationIds String[]            @db.ObjectId
  communications       UserCommunication[] @relation(fields: [userCommunicationIds], references: [id])
  messages             Message[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Channel {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  userCommunicationIds String[]            @db.ObjectId
  communications       UserCommunication[] @relation(fields: [userCommunicationIds], references: [id])
  messages             Message[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Message {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  userCommunicationId String            @db.ObjectId
  userCommunication   UserCommunication @relation(fields: [userCommunicationId], references: [id])
  chatId              String?           @db.ObjectId
  Chat                Chat?             @relation(fields: [chatId], references: [id])
  groupId             String?           @db.ObjectId
  Group               Group?            @relation(fields: [groupId], references: [id])
  channelId           String?           @db.ObjectId
  Channel             Channel?          @relation(fields: [channelId], references: [id])
  text                String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  TWITTER
}

enum UserRoles {
  USER
  ADMIN
}
